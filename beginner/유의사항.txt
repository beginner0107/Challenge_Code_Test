시간복잡도와 언어별 유의사항

효율성 
• 알고리즘 문제를 해결하는 어떤 코드를 작성했을 때, 이 프로그램이 얼마나 효율적인지 알고 싶다.

다음 중 무엇이 가장 중요할까? 
• 수행시간이 가장 중요하다.

• 어떤 프로그램을 작성했는데, 시간이 30일이 걸리면 정말로 30일동안 실행시켜야 한다.
• 어떤 프로그램을 작성했는데, 메모리가 64GB필요한데, 메모리가 부족하면 램을 구매하면 된다.
• 이런 이유 때문에 문제를 해결할 때는 시간이 중요하다.

시간 복잡도
시간 복잡도를 이용하면 작성한 코드가 시간이 대략 얼마나 걸릴지 예상할 수 있다.
• 표기법으로 대문자 O를 사용한다. (다양한 시간 복잡도가 많지만, 보통 Big-O만 사용한다)
• 영어로는 Big O Notation
• 입력의 크기 N에 대해서 시간이 얼마나 걸릴지 나타내는 방법
• 즉, 최악의 경우에 시간이 얼마나 걸릴지 알 수 있다.

• 총 N명의 사람이 식당에 방문했다.
• 식당에는 메뉴가 M개 있고, 메뉴판이 1개 있다.
• 사람 1명이 메뉴판을 읽는데 걸리는 시간은 O(M)이다.
• 주문한 모든 메뉴는 동시에 나왔고, 각 사람 i가 식사를 하는데 걸리는 시간은 Ai
이다.
• 각 사람이 계산을 하는데 걸리는 시간은 O(P) 이다.
• 각 사람이 메뉴판에 있는 모든 메뉴를 읽는 시간 복잡도 = O(NM)
• 모든 사람이 식사를 마치는데 걸리는 시간 = O(max(Ai))
• 식사를 모두 마친 다음 한 줄로 서서 각자 계산을 하는 시간 복잡도 = O(NP)

 시간 복잡도는 소스를 보고 계산할 수도 있고, 소스를 작성하기 전에 먼저 계산해볼 수 있다.
• 문제를 풀기 전에 먼저 생각한 방법의 시간 복잡도를 계산해보고 이게 시간 안에 수행될 것 같은
경우에만 구현하는 것이 좋다

사용한 메모리
• 메모리 제한은 보통 넉넉하기 때문에, 걱정할 필요가 없다.
• 대략적으로 얼마나 공간을 사용할지 예상할 수는 있다.

• 보통 가장 많은 공간을 사용하는 것은 보통 배열이다.
• 배열이 사용한 공간: 배열의 크기 × 자료형의 크기 B
• int a[10000]; → 10000×4B
• int a[100000]; → 100000×4B
• int a[1000000]; → 1000000×4B
• int a[1000][1000]; → 1000×1000×4B
• int a[10000][10000]; → 10000×10000×4B
• int a[100000][100000]; → 100000×100000×4B

언어별 유의사항
• C++에서 string의 += 연산은 O(K) 이다.
• C++에서 string의+ 연산은 O(N+K) 이다.
• Java에서 String의 += 연산은 O(N+K) 이다.
• Java의 경우 StringBuilder를 이용해야 한다.